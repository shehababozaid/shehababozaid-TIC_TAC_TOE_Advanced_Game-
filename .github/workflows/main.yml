name: Qt CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'

    - name: Build project
      run: |
        qmake "TIC_TAC_TOE_FINAL - game.pro"
        make

    - name: List all executables after build
      run: find . -type f -executable

  run-cpplint:
    name: Run cpplint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install cpplint
      run: pip install cpplint

    - name: Run cpplint on all .cpp and .h files
      run: |
        find . -name "*.cpp" -o -name "*.h" | xargs cpplint || true

  performance-test:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-run

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'

    - name: Install Qt Test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qtbase5-dev qt5-qmake qttools5-dev-tools

    - name: Install performance monitoring tools
      run: |
        sudo apt-get update
        sudo apt-get install -y time valgrind

    - name: Show directory structure
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Project files:"
        find . -name "*.pro"

    - name: Build performance test
      run: |
        echo "Building test_components..."
        if [ ! -f "test_components.pro" ]; then
          echo "Creating test_components.pro..."
          echo 'QT += core gui testlib
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
TARGET = test_components
TEMPLATE = app
SOURCES += test_components.cpp
CONFIG += testcase' > test_components.pro
        fi
        
        qmake test_components.pro
        make
        echo "Build complete. Checking for executable..."
        find . -type f -name "test_components*"
        
        TEST_EXEC=$(find . -type f -name "test_components" -o -name "test_components.exe" | head -n 1)
        if [ -n "$TEST_EXEC" ]; then
          echo "Found test executable at: $TEST_EXEC"
          chmod +x "$TEST_EXEC"
        else
          echo "Test executable not found!"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of debug directory (if exists):"
          ls -la debug/ 2>/dev/null || echo "No debug directory"
          echo "Contents of release directory (if exists):"
          ls -la release/ 2>/dev/null || echo "No release directory"
        fi

    - name: Run performance tests with time measurement
      run: |
        echo "Looking for test executable..."
        TEST_EXEC=$(find . -type f -name "test_components" -o -name "test_components.exe" | head -n 1)
        
        if [ -n "$TEST_EXEC" ]; then
          echo "Found test executable at: $TEST_EXEC"
          echo "Running performance tests with time measurement..."
          /usr/bin/time -v "$TEST_EXEC" 2> time_results.txt
          cat time_results.txt
        else
          echo "Error: test_components executable not found"
          echo "Directory contents:"
          ls -la
          find . -type f -executable
          exit 1
        fi

    - name: Run performance tests with Valgrind
      run: |
        echo "Looking for test executable..."
        TEST_EXEC=$(find . -type f -name "test_components" -o -name "test_components.exe" | head -n 1)
        
        if [ -n "$TEST_EXEC" ]; then
          echo "Found test executable at: $TEST_EXEC"
          echo "Running performance tests with Valgrind..."
          valgrind --tool=callgrind --callgrind-out-file=callgrind.out "$TEST_EXEC"
          valgrind --tool=massif --massif-out-file=massif.out "$TEST_EXEC"
        else
          echo "Error: test_components executable not found"
          echo "Directory contents:"
          ls -la
          find . -type f -executable
          exit 1
        fi

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          time_results.txt
          callgrind.out
          massif.out
